package cecs429.index;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;

public class PositionalInvertedIndex implements Index {

	//DONE datastructure is a HashMap<String, List<Posting>>
	private HashMap<String, List<Posting>> index;

	/**
	 * create and empty index
	 */
	public PositionalInvertedIndex() {
		index = new HashMap<>();
	}

	/**
	 * DONE addTerms runs with time complexity O(1)
	 * add a single/multiple terms to the index
	 * @param terms variations of the same term generated by the stemmer
	 * @param id document id the term belongs to
	 * @param position position within the document the term came from
	 */
	public void addTerm(List<String> terms, int id, int position, String title) {

		for (String term : terms) {//iterate through every term given

			List<Posting> postings = index.get(term);//find list of postings for the term

			//postings don't exist for term
			if (postings == null) {

				postings = createPosting(id, position, title);//create a new posting with docid, position
				this.index.put(term, postings);//add new posting and term to index

			} else {//build from existing posting list

				//previous document id within the postings list
				int prevDocId = postings.get(postings.size()-1).getDocumentId();
				//this document hasn't been recorded yet
				if (id > prevDocId) {
					Posting posting = new Posting(id, position, title);//add the new document id to the list
					postings.add(posting);//update postings with new posting
				//this document exists, add new position
				} else if (id == prevDocId) {
					postings.get(postings.size()-1).addPosition(position);//update postings with new position
				}

			}

		}

	}

	/**
	 * sorts the terms in the index and returns only the terms
	 * @return the terms in sorted order
	 */
	@Override
	public List<String> getVocabulary() {
		List<String> keySet = new ArrayList<>(index.keySet());
		Collections.sort(keySet);
		return keySet;
	}

	@Override
	public List<Posting> getPostings(String token) {
		return this.index.get(token);
	}

	/**
	 * Create a new posting list object for the index
	 * @param id document id associated with the new posting
	 * @param position term position to store in the new posting
	 * @return a new posting list object
	 */
	private List<Posting> createPosting(int id, int position,String title) {
		List<Posting> postings = new ArrayList<>();
		Posting posting = new Posting(id, position,title);//create a new posting
		postings.add(posting);
		return postings;
	}

}